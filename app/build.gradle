import com.android.build.gradle.api.ApplicationVariant
import groovy.xml.XmlUtil

apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'
android {
    compileSdkVersion 28
    buildToolsVersion "29.0.2"
    defaultConfig {
        applicationId "com.me.host"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.1.1'
    implementation project(path: ':hostlib')
}


Project p = project
p.afterEvaluate {
    android.applicationVariants.all {
        ApplicationVariant variant ->
            String varName = variant.name.capitalize()
            def processManifestTask = p.tasks.getByName("process${varName}Manifest")
            processManifestTask.doLast {
                DirectoryProperty dp = manifestOutputDirectory

                println("abs file:" + dp.asFile.get().absolutePath)

                String manifestPath = "${dp.asFile.get().absolutePath}/AndroidManifest.xml"
                def manifest = file(manifestPath).getText()
                def xml = new XmlParser().parseText(manifest)

                for (int i = 1; i <= 10; i++) {
                    xml.application[0].appendNode("activity", ['android:name': ".ActivityS$i"])
                }
                for (int i = 1; i < 10; i++) {
                    for (int j = 1; j <= 10; j++) {
                        xml.application[0].appendNode("activity", ['android:name': ".ActivityS${j}p${i}", 'android:process': ":p$i"])
                    }
                }
//                for (int i = 1; i < 10; i++) {
//                    for (int j = 1; j <= 10; j++) {
//                        xml.application[0].appendNode("activity", ['android:name': ".ActivityS${j}app${i}", 'android:process': ":app$i"])
//                    }
//                }
                for (int i = 1; i <= 10; i++) {
                    xml.application[0].appendNode("service", ['android:name': ".ServiceS$i"])
                }
                for (int i = 1; i < 10; i++) {
                    for (int j = 1; j <= 10; j++) {
                        xml.application[0].appendNode("service", ['android:name': ".ServiceS${j}p${i}", 'android:process': ":p$i"])
                    }
                }
//                for (int i = 1; i < 10; i++) {
//                    for (int j = 1; j <= 10; j++) {
//                        xml.application[0].appendNode("service", ['android:name': ".ServiceS${j}app${i}", 'android:process': ":app$i"])
//                    }
//                }
                def serialize = XmlUtil.serialize(xml)
                file(manifestPath).write(serialize)
            }
    }
}
